// Code generated by gowsdl DO NOT EDIT.

package gen

import (
	"context"
	"encoding/xml"
	"github.com/hooklift/gowsdl/soap"
	"time"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type AnyType struct {
	InnerXML string `xml:",innerxml"`
}

type AnyURI string

type NCName string

type ListOfContinentsByName struct {
	XMLName xml.Name `xml:"http://www.oorsprong.org/websamples.countryinfo ListOfContinentsByName"`
}

type ListOfContinentsByNameResponse struct {
	XMLName xml.Name `xml:"http://www.oorsprong.org/websamples.countryinfo ListOfContinentsByNameResponse"`

	ListOfContinentsByNameResult *ArrayOftContinent `xml:"ListOfContinentsByNameResult,omitempty" json:"ListOfContinentsByNameResult,omitempty"`
}

type ListOfContinentsByCode struct {
	XMLName xml.Name `xml:"http://www.oorsprong.org/websamples.countryinfo ListOfContinentsByCode"`
}

type ListOfContinentsByCodeResponse struct {
	XMLName xml.Name `xml:"http://www.oorsprong.org/websamples.countryinfo ListOfContinentsByCodeResponse"`

	ListOfContinentsByCodeResult *ArrayOftContinent `xml:"ListOfContinentsByCodeResult,omitempty" json:"ListOfContinentsByCodeResult,omitempty"`
}

type ListOfCurrenciesByName struct {
	XMLName xml.Name `xml:"http://www.oorsprong.org/websamples.countryinfo ListOfCurrenciesByName"`
}

type ListOfCurrenciesByNameResponse struct {
	XMLName xml.Name `xml:"http://www.oorsprong.org/websamples.countryinfo ListOfCurrenciesByNameResponse"`

	ListOfCurrenciesByNameResult *ArrayOftCurrency `xml:"ListOfCurrenciesByNameResult,omitempty" json:"ListOfCurrenciesByNameResult,omitempty"`
}

type ListOfCurrenciesByCode struct {
	XMLName xml.Name `xml:"http://www.oorsprong.org/websamples.countryinfo ListOfCurrenciesByCode"`
}

type ListOfCurrenciesByCodeResponse struct {
	XMLName xml.Name `xml:"http://www.oorsprong.org/websamples.countryinfo ListOfCurrenciesByCodeResponse"`

	ListOfCurrenciesByCodeResult *ArrayOftCurrency `xml:"ListOfCurrenciesByCodeResult,omitempty" json:"ListOfCurrenciesByCodeResult,omitempty"`
}

type CurrencyName struct {
	XMLName xml.Name `xml:"http://www.oorsprong.org/websamples.countryinfo CurrencyName"`

	SCurrencyISOCode string `xml:"sCurrencyISOCode,omitempty" json:"sCurrencyISOCode,omitempty"`
}

type CurrencyNameResponse struct {
	XMLName xml.Name `xml:"http://www.oorsprong.org/websamples.countryinfo CurrencyNameResponse"`

	CurrencyNameResult string `xml:"CurrencyNameResult,omitempty" json:"CurrencyNameResult,omitempty"`
}

type ListOfCountryNamesByCode struct {
	XMLName xml.Name `xml:"http://www.oorsprong.org/websamples.countryinfo ListOfCountryNamesByCode"`
}

type ListOfCountryNamesByCodeResponse struct {
	XMLName xml.Name `xml:"http://www.oorsprong.org/websamples.countryinfo ListOfCountryNamesByCodeResponse"`

	ListOfCountryNamesByCodeResult *ArrayOftCountryCodeAndName `xml:"ListOfCountryNamesByCodeResult,omitempty" json:"ListOfCountryNamesByCodeResult,omitempty"`
}

type ListOfCountryNamesByName struct {
	XMLName xml.Name `xml:"http://www.oorsprong.org/websamples.countryinfo ListOfCountryNamesByName"`
}

type ListOfCountryNamesByNameResponse struct {
	XMLName xml.Name `xml:"http://www.oorsprong.org/websamples.countryinfo ListOfCountryNamesByNameResponse"`

	ListOfCountryNamesByNameResult *ArrayOftCountryCodeAndName `xml:"ListOfCountryNamesByNameResult,omitempty" json:"ListOfCountryNamesByNameResult,omitempty"`
}

type ListOfCountryNamesGroupedByContinent struct {
	XMLName xml.Name `xml:"http://www.oorsprong.org/websamples.countryinfo ListOfCountryNamesGroupedByContinent"`
}

type ListOfCountryNamesGroupedByContinentResponse struct {
	XMLName xml.Name `xml:"http://www.oorsprong.org/websamples.countryinfo ListOfCountryNamesGroupedByContinentResponse"`

	ListOfCountryNamesGroupedByContinentResult *ArrayOftCountryCodeAndNameGroupedByContinent `xml:"ListOfCountryNamesGroupedByContinentResult,omitempty" json:"ListOfCountryNamesGroupedByContinentResult,omitempty"`
}

type CountryName struct {
	XMLName xml.Name `xml:"http://www.oorsprong.org/websamples.countryinfo CountryName"`

	SCountryISOCode string `xml:"sCountryISOCode,omitempty" json:"sCountryISOCode,omitempty"`
}

type CountryNameResponse struct {
	XMLName xml.Name `xml:"http://www.oorsprong.org/websamples.countryinfo CountryNameResponse"`

	CountryNameResult string `xml:"CountryNameResult,omitempty" json:"CountryNameResult,omitempty"`
}

type CountryISOCode struct {
	XMLName xml.Name `xml:"http://www.oorsprong.org/websamples.countryinfo CountryISOCode"`

	SCountryName string `xml:"sCountryName,omitempty" json:"sCountryName,omitempty"`
}

type CountryISOCodeResponse struct {
	XMLName xml.Name `xml:"http://www.oorsprong.org/websamples.countryinfo CountryISOCodeResponse"`

	CountryISOCodeResult string `xml:"CountryISOCodeResult,omitempty" json:"CountryISOCodeResult,omitempty"`
}

type CapitalCity struct {
	XMLName xml.Name `xml:"http://www.oorsprong.org/websamples.countryinfo CapitalCity"`

	SCountryISOCode string `xml:"sCountryISOCode,omitempty" json:"sCountryISOCode,omitempty"`
}

type CapitalCityResponse struct {
	XMLName xml.Name `xml:"http://www.oorsprong.org/websamples.countryinfo CapitalCityResponse"`

	CapitalCityResult string `xml:"CapitalCityResult,omitempty" json:"CapitalCityResult,omitempty"`
}

type CountryCurrency struct {
	XMLName xml.Name `xml:"http://www.oorsprong.org/websamples.countryinfo CountryCurrency"`

	SCountryISOCode string `xml:"sCountryISOCode,omitempty" json:"sCountryISOCode,omitempty"`
}

type CountryCurrencyResponse struct {
	XMLName xml.Name `xml:"http://www.oorsprong.org/websamples.countryinfo CountryCurrencyResponse"`

	CountryCurrencyResult *TCurrency `xml:"CountryCurrencyResult,omitempty" json:"CountryCurrencyResult,omitempty"`
}

type CountryFlag struct {
	XMLName xml.Name `xml:"http://www.oorsprong.org/websamples.countryinfo CountryFlag"`

	SCountryISOCode string `xml:"sCountryISOCode,omitempty" json:"sCountryISOCode,omitempty"`
}

type CountryFlagResponse struct {
	XMLName xml.Name `xml:"http://www.oorsprong.org/websamples.countryinfo CountryFlagResponse"`

	CountryFlagResult string `xml:"CountryFlagResult,omitempty" json:"CountryFlagResult,omitempty"`
}

type CountryIntPhoneCode struct {
	XMLName xml.Name `xml:"http://www.oorsprong.org/websamples.countryinfo CountryIntPhoneCode"`

	SCountryISOCode string `xml:"sCountryISOCode,omitempty" json:"sCountryISOCode,omitempty"`
}

type CountryIntPhoneCodeResponse struct {
	XMLName xml.Name `xml:"http://www.oorsprong.org/websamples.countryinfo CountryIntPhoneCodeResponse"`

	CountryIntPhoneCodeResult string `xml:"CountryIntPhoneCodeResult,omitempty" json:"CountryIntPhoneCodeResult,omitempty"`
}

type FullCountryInfo struct {
	XMLName xml.Name `xml:"http://www.oorsprong.org/websamples.countryinfo FullCountryInfo"`

	SCountryISOCode string `xml:"sCountryISOCode,omitempty" json:"sCountryISOCode,omitempty"`
}

type FullCountryInfoResponse struct {
	XMLName xml.Name `xml:"http://www.oorsprong.org/websamples.countryinfo FullCountryInfoResponse"`

	FullCountryInfoResult *TCountryInfo `xml:"FullCountryInfoResult,omitempty" json:"FullCountryInfoResult,omitempty"`
}

type FullCountryInfoAllCountries struct {
	XMLName xml.Name `xml:"http://www.oorsprong.org/websamples.countryinfo FullCountryInfoAllCountries"`
}

type FullCountryInfoAllCountriesResponse struct {
	XMLName xml.Name `xml:"http://www.oorsprong.org/websamples.countryinfo FullCountryInfoAllCountriesResponse"`

	FullCountryInfoAllCountriesResult *ArrayOftCountryInfo `xml:"FullCountryInfoAllCountriesResult,omitempty" json:"FullCountryInfoAllCountriesResult,omitempty"`
}

type CountriesUsingCurrency struct {
	XMLName xml.Name `xml:"http://www.oorsprong.org/websamples.countryinfo CountriesUsingCurrency"`

	SISOCurrencyCode string `xml:"sISOCurrencyCode,omitempty" json:"sISOCurrencyCode,omitempty"`
}

type CountriesUsingCurrencyResponse struct {
	XMLName xml.Name `xml:"http://www.oorsprong.org/websamples.countryinfo CountriesUsingCurrencyResponse"`

	CountriesUsingCurrencyResult *ArrayOftCountryCodeAndName `xml:"CountriesUsingCurrencyResult,omitempty" json:"CountriesUsingCurrencyResult,omitempty"`
}

type ListOfLanguagesByName struct {
	XMLName xml.Name `xml:"http://www.oorsprong.org/websamples.countryinfo ListOfLanguagesByName"`
}

type ListOfLanguagesByNameResponse struct {
	XMLName xml.Name `xml:"http://www.oorsprong.org/websamples.countryinfo ListOfLanguagesByNameResponse"`

	ListOfLanguagesByNameResult *ArrayOftLanguage `xml:"ListOfLanguagesByNameResult,omitempty" json:"ListOfLanguagesByNameResult,omitempty"`
}

type ListOfLanguagesByCode struct {
	XMLName xml.Name `xml:"http://www.oorsprong.org/websamples.countryinfo ListOfLanguagesByCode"`
}

type ListOfLanguagesByCodeResponse struct {
	XMLName xml.Name `xml:"http://www.oorsprong.org/websamples.countryinfo ListOfLanguagesByCodeResponse"`

	ListOfLanguagesByCodeResult *ArrayOftLanguage `xml:"ListOfLanguagesByCodeResult,omitempty" json:"ListOfLanguagesByCodeResult,omitempty"`
}

type LanguageName struct {
	XMLName xml.Name `xml:"http://www.oorsprong.org/websamples.countryinfo LanguageName"`

	SISOCode string `xml:"sISOCode,omitempty" json:"sISOCode,omitempty"`
}

type LanguageNameResponse struct {
	XMLName xml.Name `xml:"http://www.oorsprong.org/websamples.countryinfo LanguageNameResponse"`

	LanguageNameResult string `xml:"LanguageNameResult,omitempty" json:"LanguageNameResult,omitempty"`
}

type LanguageISOCode struct {
	XMLName xml.Name `xml:"http://www.oorsprong.org/websamples.countryinfo LanguageISOCode"`

	SLanguageName string `xml:"sLanguageName,omitempty" json:"sLanguageName,omitempty"`
}

type LanguageISOCodeResponse struct {
	XMLName xml.Name `xml:"http://www.oorsprong.org/websamples.countryinfo LanguageISOCodeResponse"`

	LanguageISOCodeResult string `xml:"LanguageISOCodeResult,omitempty" json:"LanguageISOCodeResult,omitempty"`
}

type TContinent struct {
	XMLName xml.Name `xml:"http://www.oorsprong.org/websamples.countryinfo tContinent"`

	SCode string `xml:"sCode,omitempty" json:"sCode,omitempty"`

	SName string `xml:"sName,omitempty" json:"sName,omitempty"`
}

type TCurrency struct {
	XMLName xml.Name `xml:"http://www.oorsprong.org/websamples.countryinfo tCurrency"`

	SISOCode string `xml:"sISOCode,omitempty" json:"sISOCode,omitempty"`

	SName string `xml:"sName,omitempty" json:"sName,omitempty"`
}

type TCountryCodeAndName struct {
	XMLName xml.Name `xml:"http://www.oorsprong.org/websamples.countryinfo tCountryCodeAndName"`

	SISOCode string `xml:"sISOCode,omitempty" json:"sISOCode,omitempty"`

	SName string `xml:"sName,omitempty" json:"sName,omitempty"`
}

type TCountryCodeAndNameGroupedByContinent struct {
	XMLName xml.Name `xml:"http://www.oorsprong.org/websamples.countryinfo tCountryCodeAndNameGroupedByContinent"`

	Continent *TContinent `xml:"Continent,omitempty" json:"Continent,omitempty"`

	CountryCodeAndNames *ArrayOftCountryCodeAndName `xml:"CountryCodeAndNames,omitempty" json:"CountryCodeAndNames,omitempty"`
}

type TCountryInfo struct {
	XMLName xml.Name `xml:"http://www.oorsprong.org/websamples.countryinfo tCountryInfo"`

	SISOCode string `xml:"sISOCode,omitempty" json:"sISOCode,omitempty"`

	SName string `xml:"sName,omitempty" json:"sName,omitempty"`

	SCapitalCity string `xml:"sCapitalCity,omitempty" json:"sCapitalCity,omitempty"`

	SPhoneCode string `xml:"sPhoneCode,omitempty" json:"sPhoneCode,omitempty"`

	SContinentCode string `xml:"sContinentCode,omitempty" json:"sContinentCode,omitempty"`

	SCurrencyISOCode string `xml:"sCurrencyISOCode,omitempty" json:"sCurrencyISOCode,omitempty"`

	SCountryFlag string `xml:"sCountryFlag,omitempty" json:"sCountryFlag,omitempty"`

	Languages *ArrayOftLanguage `xml:"Languages,omitempty" json:"Languages,omitempty"`
}

type TLanguage struct {
	XMLName xml.Name `xml:"http://www.oorsprong.org/websamples.countryinfo tLanguage"`

	SISOCode string `xml:"sISOCode,omitempty" json:"sISOCode,omitempty"`

	SName string `xml:"sName,omitempty" json:"sName,omitempty"`
}

type ArrayOftCountryCodeAndName struct {
	TCountryCodeAndName []*TCountryCodeAndName `xml:"tCountryCodeAndName,omitempty" json:"tCountryCodeAndName,omitempty"`
}

type ArrayOftLanguage struct {
	TLanguage []*TLanguage `xml:"tLanguage,omitempty" json:"tLanguage,omitempty"`
}

type ArrayOftContinent struct {
	TContinent []*TContinent `xml:"tContinent,omitempty" json:"tContinent,omitempty"`
}

type ArrayOftCurrency struct {
	TCurrency []*TCurrency `xml:"tCurrency,omitempty" json:"tCurrency,omitempty"`
}

type ArrayOftCountryCodeAndNameGroupedByContinent struct {
	TCountryCodeAndNameGroupedByContinent []*TCountryCodeAndNameGroupedByContinent `xml:"tCountryCodeAndNameGroupedByContinent,omitempty" json:"tCountryCodeAndNameGroupedByContinent,omitempty"`
}

type ArrayOftCountryInfo struct {
	TCountryInfo []*TCountryInfo `xml:"tCountryInfo,omitempty" json:"tCountryInfo,omitempty"`
}

type CountryInfoServiceSoapType interface {

	/* Returns a list of continents ordered by name. */
	ListOfContinentsByName(request *ListOfContinentsByName) (*ListOfContinentsByNameResponse, error)

	ListOfContinentsByNameContext(ctx context.Context, request *ListOfContinentsByName) (*ListOfContinentsByNameResponse, error)

	/* Returns a list of continents ordered by code. */
	ListOfContinentsByCode(request *ListOfContinentsByCode) (*ListOfContinentsByCodeResponse, error)

	ListOfContinentsByCodeContext(ctx context.Context, request *ListOfContinentsByCode) (*ListOfContinentsByCodeResponse, error)

	/* Returns a list of currencies ordered by name. */
	ListOfCurrenciesByName(request *ListOfCurrenciesByName) (*ListOfCurrenciesByNameResponse, error)

	ListOfCurrenciesByNameContext(ctx context.Context, request *ListOfCurrenciesByName) (*ListOfCurrenciesByNameResponse, error)

	/* Returns a list of currencies ordered by code. */
	ListOfCurrenciesByCode(request *ListOfCurrenciesByCode) (*ListOfCurrenciesByCodeResponse, error)

	ListOfCurrenciesByCodeContext(ctx context.Context, request *ListOfCurrenciesByCode) (*ListOfCurrenciesByCodeResponse, error)

	/* Returns the name of the currency (if found) */
	CurrencyName(request *CurrencyName) (*CurrencyNameResponse, error)

	CurrencyNameContext(ctx context.Context, request *CurrencyName) (*CurrencyNameResponse, error)

	/* Returns a list of all stored counties ordered by ISO code */
	ListOfCountryNamesByCode(request *ListOfCountryNamesByCode) (*ListOfCountryNamesByCodeResponse, error)

	ListOfCountryNamesByCodeContext(ctx context.Context, request *ListOfCountryNamesByCode) (*ListOfCountryNamesByCodeResponse, error)

	/* Returns a list of all stored counties ordered by country name */
	ListOfCountryNamesByName(request *ListOfCountryNamesByName) (*ListOfCountryNamesByNameResponse, error)

	ListOfCountryNamesByNameContext(ctx context.Context, request *ListOfCountryNamesByName) (*ListOfCountryNamesByNameResponse, error)

	/* Returns a list of all stored counties grouped per continent */
	ListOfCountryNamesGroupedByContinent(request *ListOfCountryNamesGroupedByContinent) (*ListOfCountryNamesGroupedByContinentResponse, error)

	ListOfCountryNamesGroupedByContinentContext(ctx context.Context, request *ListOfCountryNamesGroupedByContinent) (*ListOfCountryNamesGroupedByContinentResponse, error)

	/* Searches the database for a country by the passed ISO country code */
	CountryName(request *CountryName) (*CountryNameResponse, error)

	CountryNameContext(ctx context.Context, request *CountryName) (*CountryNameResponse, error)

	/* This function tries to found a country based on the passed country name. */
	CountryISOCode(request *CountryISOCode) (*CountryISOCodeResponse, error)

	CountryISOCodeContext(ctx context.Context, request *CountryISOCode) (*CountryISOCodeResponse, error)

	/* Returns the  name of the captial city for the passed country code */
	CapitalCity(request *CapitalCity) (*CapitalCityResponse, error)

	CapitalCityContext(ctx context.Context, request *CapitalCity) (*CapitalCityResponse, error)

	/* Returns the currency ISO code and name for the passed country ISO code */
	CountryCurrency(request *CountryCurrency) (*CountryCurrencyResponse, error)

	CountryCurrencyContext(ctx context.Context, request *CountryCurrency) (*CountryCurrencyResponse, error)

	/* Returns a link to a picture of the country flag */
	CountryFlag(request *CountryFlag) (*CountryFlagResponse, error)

	CountryFlagContext(ctx context.Context, request *CountryFlag) (*CountryFlagResponse, error)

	/* Returns the internation phone code for the passed ISO country code */
	CountryIntPhoneCode(request *CountryIntPhoneCode) (*CountryIntPhoneCodeResponse, error)

	CountryIntPhoneCodeContext(ctx context.Context, request *CountryIntPhoneCode) (*CountryIntPhoneCodeResponse, error)

	/* Returns a struct with all the stored country information. Pass the ISO country code */
	FullCountryInfo(request *FullCountryInfo) (*FullCountryInfoResponse, error)

	FullCountryInfoContext(ctx context.Context, request *FullCountryInfo) (*FullCountryInfoResponse, error)

	/* Returns an array with all countries and all the language information stored */
	FullCountryInfoAllCountries(request *FullCountryInfoAllCountries) (*FullCountryInfoAllCountriesResponse, error)

	FullCountryInfoAllCountriesContext(ctx context.Context, request *FullCountryInfoAllCountries) (*FullCountryInfoAllCountriesResponse, error)

	/* Returns a list of all countries that use the same currency code. Pass a ISO currency code */
	CountriesUsingCurrency(request *CountriesUsingCurrency) (*CountriesUsingCurrencyResponse, error)

	CountriesUsingCurrencyContext(ctx context.Context, request *CountriesUsingCurrency) (*CountriesUsingCurrencyResponse, error)

	/* Returns an array of languages ordered by name */
	ListOfLanguagesByName(request *ListOfLanguagesByName) (*ListOfLanguagesByNameResponse, error)

	ListOfLanguagesByNameContext(ctx context.Context, request *ListOfLanguagesByName) (*ListOfLanguagesByNameResponse, error)

	/* Returns an array of languages ordered by code */
	ListOfLanguagesByCode(request *ListOfLanguagesByCode) (*ListOfLanguagesByCodeResponse, error)

	ListOfLanguagesByCodeContext(ctx context.Context, request *ListOfLanguagesByCode) (*ListOfLanguagesByCodeResponse, error)

	/* Find a language name based on the passed ISO language code */
	LanguageName(request *LanguageName) (*LanguageNameResponse, error)

	LanguageNameContext(ctx context.Context, request *LanguageName) (*LanguageNameResponse, error)

	/* Find a language ISO code based on the passed language name */
	LanguageISOCode(request *LanguageISOCode) (*LanguageISOCodeResponse, error)

	LanguageISOCodeContext(ctx context.Context, request *LanguageISOCode) (*LanguageISOCodeResponse, error)
}

type countryInfoServiceSoapType struct {
	client *soap.Client
}

func NewCountryInfoServiceSoapType(client *soap.Client) CountryInfoServiceSoapType {
	return &countryInfoServiceSoapType{
		client: client,
	}
}

func (service *countryInfoServiceSoapType) ListOfContinentsByNameContext(ctx context.Context, request *ListOfContinentsByName) (*ListOfContinentsByNameResponse, error) {
	response := new(ListOfContinentsByNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *countryInfoServiceSoapType) ListOfContinentsByName(request *ListOfContinentsByName) (*ListOfContinentsByNameResponse, error) {
	return service.ListOfContinentsByNameContext(
		context.Background(),
		request,
	)
}

func (service *countryInfoServiceSoapType) ListOfContinentsByCodeContext(ctx context.Context, request *ListOfContinentsByCode) (*ListOfContinentsByCodeResponse, error) {
	response := new(ListOfContinentsByCodeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *countryInfoServiceSoapType) ListOfContinentsByCode(request *ListOfContinentsByCode) (*ListOfContinentsByCodeResponse, error) {
	return service.ListOfContinentsByCodeContext(
		context.Background(),
		request,
	)
}

func (service *countryInfoServiceSoapType) ListOfCurrenciesByNameContext(ctx context.Context, request *ListOfCurrenciesByName) (*ListOfCurrenciesByNameResponse, error) {
	response := new(ListOfCurrenciesByNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *countryInfoServiceSoapType) ListOfCurrenciesByName(request *ListOfCurrenciesByName) (*ListOfCurrenciesByNameResponse, error) {
	return service.ListOfCurrenciesByNameContext(
		context.Background(),
		request,
	)
}

func (service *countryInfoServiceSoapType) ListOfCurrenciesByCodeContext(ctx context.Context, request *ListOfCurrenciesByCode) (*ListOfCurrenciesByCodeResponse, error) {
	response := new(ListOfCurrenciesByCodeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *countryInfoServiceSoapType) ListOfCurrenciesByCode(request *ListOfCurrenciesByCode) (*ListOfCurrenciesByCodeResponse, error) {
	return service.ListOfCurrenciesByCodeContext(
		context.Background(),
		request,
	)
}

func (service *countryInfoServiceSoapType) CurrencyNameContext(ctx context.Context, request *CurrencyName) (*CurrencyNameResponse, error) {
	response := new(CurrencyNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *countryInfoServiceSoapType) CurrencyName(request *CurrencyName) (*CurrencyNameResponse, error) {
	return service.CurrencyNameContext(
		context.Background(),
		request,
	)
}

func (service *countryInfoServiceSoapType) ListOfCountryNamesByCodeContext(ctx context.Context, request *ListOfCountryNamesByCode) (*ListOfCountryNamesByCodeResponse, error) {
	response := new(ListOfCountryNamesByCodeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *countryInfoServiceSoapType) ListOfCountryNamesByCode(request *ListOfCountryNamesByCode) (*ListOfCountryNamesByCodeResponse, error) {
	return service.ListOfCountryNamesByCodeContext(
		context.Background(),
		request,
	)
}

func (service *countryInfoServiceSoapType) ListOfCountryNamesByNameContext(ctx context.Context, request *ListOfCountryNamesByName) (*ListOfCountryNamesByNameResponse, error) {
	response := new(ListOfCountryNamesByNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *countryInfoServiceSoapType) ListOfCountryNamesByName(request *ListOfCountryNamesByName) (*ListOfCountryNamesByNameResponse, error) {
	return service.ListOfCountryNamesByNameContext(
		context.Background(),
		request,
	)
}

func (service *countryInfoServiceSoapType) ListOfCountryNamesGroupedByContinentContext(ctx context.Context, request *ListOfCountryNamesGroupedByContinent) (*ListOfCountryNamesGroupedByContinentResponse, error) {
	response := new(ListOfCountryNamesGroupedByContinentResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *countryInfoServiceSoapType) ListOfCountryNamesGroupedByContinent(request *ListOfCountryNamesGroupedByContinent) (*ListOfCountryNamesGroupedByContinentResponse, error) {
	return service.ListOfCountryNamesGroupedByContinentContext(
		context.Background(),
		request,
	)
}

func (service *countryInfoServiceSoapType) CountryNameContext(ctx context.Context, request *CountryName) (*CountryNameResponse, error) {
	response := new(CountryNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *countryInfoServiceSoapType) CountryName(request *CountryName) (*CountryNameResponse, error) {
	return service.CountryNameContext(
		context.Background(),
		request,
	)
}

func (service *countryInfoServiceSoapType) CountryISOCodeContext(ctx context.Context, request *CountryISOCode) (*CountryISOCodeResponse, error) {
	response := new(CountryISOCodeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *countryInfoServiceSoapType) CountryISOCode(request *CountryISOCode) (*CountryISOCodeResponse, error) {
	return service.CountryISOCodeContext(
		context.Background(),
		request,
	)
}

func (service *countryInfoServiceSoapType) CapitalCityContext(ctx context.Context, request *CapitalCity) (*CapitalCityResponse, error) {
	response := new(CapitalCityResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *countryInfoServiceSoapType) CapitalCity(request *CapitalCity) (*CapitalCityResponse, error) {
	return service.CapitalCityContext(
		context.Background(),
		request,
	)
}

func (service *countryInfoServiceSoapType) CountryCurrencyContext(ctx context.Context, request *CountryCurrency) (*CountryCurrencyResponse, error) {
	response := new(CountryCurrencyResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *countryInfoServiceSoapType) CountryCurrency(request *CountryCurrency) (*CountryCurrencyResponse, error) {
	return service.CountryCurrencyContext(
		context.Background(),
		request,
	)
}

func (service *countryInfoServiceSoapType) CountryFlagContext(ctx context.Context, request *CountryFlag) (*CountryFlagResponse, error) {
	response := new(CountryFlagResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *countryInfoServiceSoapType) CountryFlag(request *CountryFlag) (*CountryFlagResponse, error) {
	return service.CountryFlagContext(
		context.Background(),
		request,
	)
}

func (service *countryInfoServiceSoapType) CountryIntPhoneCodeContext(ctx context.Context, request *CountryIntPhoneCode) (*CountryIntPhoneCodeResponse, error) {
	response := new(CountryIntPhoneCodeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *countryInfoServiceSoapType) CountryIntPhoneCode(request *CountryIntPhoneCode) (*CountryIntPhoneCodeResponse, error) {
	return service.CountryIntPhoneCodeContext(
		context.Background(),
		request,
	)
}

func (service *countryInfoServiceSoapType) FullCountryInfoContext(ctx context.Context, request *FullCountryInfo) (*FullCountryInfoResponse, error) {
	response := new(FullCountryInfoResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *countryInfoServiceSoapType) FullCountryInfo(request *FullCountryInfo) (*FullCountryInfoResponse, error) {
	return service.FullCountryInfoContext(
		context.Background(),
		request,
	)
}

func (service *countryInfoServiceSoapType) FullCountryInfoAllCountriesContext(ctx context.Context, request *FullCountryInfoAllCountries) (*FullCountryInfoAllCountriesResponse, error) {
	response := new(FullCountryInfoAllCountriesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *countryInfoServiceSoapType) FullCountryInfoAllCountries(request *FullCountryInfoAllCountries) (*FullCountryInfoAllCountriesResponse, error) {
	return service.FullCountryInfoAllCountriesContext(
		context.Background(),
		request,
	)
}

func (service *countryInfoServiceSoapType) CountriesUsingCurrencyContext(ctx context.Context, request *CountriesUsingCurrency) (*CountriesUsingCurrencyResponse, error) {
	response := new(CountriesUsingCurrencyResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *countryInfoServiceSoapType) CountriesUsingCurrency(request *CountriesUsingCurrency) (*CountriesUsingCurrencyResponse, error) {
	return service.CountriesUsingCurrencyContext(
		context.Background(),
		request,
	)
}

func (service *countryInfoServiceSoapType) ListOfLanguagesByNameContext(ctx context.Context, request *ListOfLanguagesByName) (*ListOfLanguagesByNameResponse, error) {
	response := new(ListOfLanguagesByNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *countryInfoServiceSoapType) ListOfLanguagesByName(request *ListOfLanguagesByName) (*ListOfLanguagesByNameResponse, error) {
	return service.ListOfLanguagesByNameContext(
		context.Background(),
		request,
	)
}

func (service *countryInfoServiceSoapType) ListOfLanguagesByCodeContext(ctx context.Context, request *ListOfLanguagesByCode) (*ListOfLanguagesByCodeResponse, error) {
	response := new(ListOfLanguagesByCodeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *countryInfoServiceSoapType) ListOfLanguagesByCode(request *ListOfLanguagesByCode) (*ListOfLanguagesByCodeResponse, error) {
	return service.ListOfLanguagesByCodeContext(
		context.Background(),
		request,
	)
}

func (service *countryInfoServiceSoapType) LanguageNameContext(ctx context.Context, request *LanguageName) (*LanguageNameResponse, error) {
	response := new(LanguageNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *countryInfoServiceSoapType) LanguageName(request *LanguageName) (*LanguageNameResponse, error) {
	return service.LanguageNameContext(
		context.Background(),
		request,
	)
}

func (service *countryInfoServiceSoapType) LanguageISOCodeContext(ctx context.Context, request *LanguageISOCode) (*LanguageISOCodeResponse, error) {
	response := new(LanguageISOCodeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *countryInfoServiceSoapType) LanguageISOCode(request *LanguageISOCode) (*LanguageISOCodeResponse, error) {
	return service.LanguageISOCodeContext(
		context.Background(),
		request,
	)
}
